/* 
    La propiedad  position nos permite posicionar los elementos.
    Hay algunos conceptos que debeis concocer para entender
    position.

    Flujo de renderizado-> Por norma general los elementos se 
    dibujan de izquierda a derecha y de arrriba abajo. El punto
    0,0 de los elementos, por norma general, es la esquina superior
    izquierda.

    Espacio reservado -> Es el espacio que tiene un elemento asignado
    en el navegador.

    Elemento posicionado -> Esto significa que el elemento tiene la
    propiedad position con un valor distinto de "static", que es el 
    valor que tiene esta propiedad por defecto.

    stackin context -> Contexto de apilamiento. Es el orden en el 
    que se apilaran las cajas que se superponen, dentro del mismo
    contenedor

    Al posicionar un elemento se habilitan 5 propiedades que podemos
    utilizar para mover los elementos en los 3 ejes.

      top -> El elemento se movera desde la parte superior la
      distancia que le hayamos indicado.

      right -> El elemento se movera desde la parte derecha la
      distancia que le hayamos indicado.

      bottom -> El elemento se movera desde la parte inferior la
      distancia que le hayamos indicado.

      left -> El elemento se movera desde la parte izquierda la
      distancia que le hayamos indicado.

      z-index -> Nos permite mover el elemento en el contexto
      de apilamiento (eje z)

      NOTA: Si a un elemento le declaramos la propiedad top y/o
      left, las propiedades bottom y/o right no funcionaran.

      Los posibles valores que le podemos dar a position son:
        Static -> Es el valor que tiene por defecto un elemento,
        con este valor el elemento NO ESTA POSICIONADO y por lo
        cual no podemos moverlo

        Relative -> El elemento mantendra su posicion y medidas
        en el flujo de renderizado y mantendra su aspecto reservado.
        Si lo movemos lo hara usando su posicion en el html como
        punto de referencia.

        Absolute -> El elemento perdera sus medidas y su espacio
        reservado. Si lo movemos usara el elemento padre posicionado
        como referencia. Si no tiene ninguno, usara el elemento html
        de referencia.

        Fixed -> El elemento perdera sus medidas y su espacio
        reservado. Si lo movemos usara el elemento html de referencia,
        y ademas se quedara fijo en esa posicion aunque hagamos scroll.

        Sticky -> Es una mezcla de position relative y fixed.
        Con este tipo de posicionamiento los valores top, left, bottom
        y right no sirven para mover el elemento, si no para indicarle
        en qué punto pasara a tener un comportamiento de posicionamiento
        fixed, hasta llegar a ese punto se comportará como si no tuviera
        posicionamiento, aunque si contara como posicionado si 
        necesitariamos colocar otro elemento respecto a el (absolute)
    
    z-index: Es la propiead que nos permite ordenar los elementos
    superpuestos para controlar cual se coloca por delante y por
    detras.
*/
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  background-color: #333;
  color: #fff;
  /* padding-top: 70px */
}
/* 
.box {
  text-align: center;
  width: 100px;
  height: 100px;
}

ACA SE EMPLEA POSITION ABSOLUTE HACE REFERENCIA AL HTML O AL DIV
AL QUE PERTENEZCA

.container {
  width: 300px;
  height: 300px;
  position: absolute;
}
.box-1 {
  background-color: lightcoral;
  /*  position: relative;
      left:25px;
      right: 50px;  
      para el position: absolute debe estar dentro de un div
      o hara referencia al html si esta dentro de un div no
      necesariamente debe ser hijo sino tambien nieto funciona*/

/* position: absolute;
  right: 0;
  bottom: 0;
}
.box-2 {
  background-color: lightgreen;
  position: absolute;
  right: 0;
  bottom: 0;
}

.link {
  position: absolute;
  background-color: lime;
  width: 200px;
  top :50px;
} */
/* ACA SE EMPLEA POSITION FIXED EL ELEMENTO SE ESTANCA A PESAR
DE HACER SCROLL */
/* .header {
  text-align: center;
  background-color: lightskyblue;
  color: orangered;
  /* position: fixed;
  top:0;
  width: 100%; */
/* position:sticky;
  top:0; 
  height: 400px;
  /* el overflow:hidden hace que el position sticky no funcione 
  overflow:hidden;
} 

.menu{
  position: sticky;
  top:0;
}

  article{
    outline: 3px solid red;
  }
.article-title{
  position: sticky;
  top:0;
  background-color: #333;
  margin:0;
}

/* .link{
  position: fixed;
  background-color: lightcoral;
  width: 200px;
} 

img{
  width: 100%;
  display: block;
}

el video de propiedad z-index
*/

.container {
  width: 200px;
  height: 200px;
  background-color: #555;
  position: relative;
}

.box {
  width: 100px;
  height: 100px;
  text-align: center;
  color: #333;
}
.box-1 {
  background-color: lightcoral;
  position: relative;
  left: 150px;
  /* en z-index se superpone el mayor valor y un padre nunca
  va a estar delante que un hijo pero si atras de este :'c */
  z-index: -1;
}

.box-1-2 {
  background-color: aquamarine;
  position: relative;
  left: 150px;
  top:-25px;
  z-index: -2;
}
.box-2 {
  background-color: lightgreen;
  position: relative;
  top: 50px;
  z-index: 1;
}
.box-3 {
  background-color: lightseagreen;
  position: relative;
}
